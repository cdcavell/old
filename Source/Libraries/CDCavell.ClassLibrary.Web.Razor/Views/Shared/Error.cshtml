@using CDCavell.ClassLibrary.Web.Mvc.Models
@using Microsoft.AspNetCore.Hosting
@inject IWebHostEnvironment host

@model ErrorViewModel
@{
    PageViewModel pageModel = (PageViewModel)ViewData["PageViewModel"];

    var StatusCode = Model?.StatusCode;
    var status = Model?.StatusMessage;
    var requestId = Model?.RequestId;
    var exception = (host.EnvironmentName.Equals("Production") || host.EnvironmentName.Equals("Development") || host.EnvironmentName.Equals("Local")) ? Model?.Exception : null;
}

@{
    if (exception != null)
    {
        ViewData["Title"] = "Exception Error";
    }
    else
    {
        ViewData["Title"] = "Resource Error";
    }
}

<div class="shadow alert alert-danger mb-1" role="alert">
    <strong>Status Code: @StatusCode.ToString() @ViewData["Title"]</strong>
    @if (status != null)
    {
        <br />@Html.Raw(status)
    }
</div>
<p class="request-id ml-2 mt-0">
    @if (requestId != null)
    {
        <span>Request Id: <code>@requestId</code></span>
    }
</p>

@if (exception != null)
{
    <br />
    <p class="exception">
        <ul class="exception">
            <li><b>Exception Message:</b> @exception.Message</li>
            <li><b>Exception Source:</b> @exception.Source</li>
            <li><b>Exception StackTrace:</b><br /><span style="white-space: pre-line">@exception.StackTrace</span></li>
        </ul>

        @if (exception.InnerException != null)
        {
            <ul class="exception">
                <li><b>Inner Exception Message:</b> @exception.InnerException.Message</li>
                <li><b>Inner Exception Source:</b> @exception.InnerException.Source</li>
                <li><b>Inner Exception StackTrace:</b><br /><span style="white-space: pre-line">@exception.InnerException.StackTrace</span></li>
            </ul>
        }
    </p>
}


